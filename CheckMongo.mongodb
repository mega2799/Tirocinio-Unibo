// MongoDB Playground
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

const database = 'tirocinio';
const collection = 'NEW_COLLECTION_NAME';

// The current database to use.
use(database);

// Create a new collection

db.post.aggregate(
  [
    {
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      $unwind: {
        path: "$Post"
      }
    },
    {
      $match: {
        "Post.A1" : 1
      }
    },
    {
      $count: "total"
    }
  ]
)

db.post.aggregate(
  [
    {
      $unwind : {
        path : "$Post"
      }
    },
    {
      /**
       * query: The query in MQL.
       */
      $match: {
        "Post.AK" : 1
      }
    }
  ]
)

db.mediumRelation.aggregate(
  [
     {
      $match: {
        "A1" : 412
      }
    },
    {
      $count : "tot"
    }
  ]
)

// db.mediumRelation.aggregate(
//   [
//      {
//       $match: {
//         "A1" :  
//       }
//     },
//     {
//       $count : "tot"
//     } 
//   ]
// )


db.mediumRelation.aggregate(
  [
    {
      $match: {
        // "AK" : {$exists : true}
        "AK" : 23
      }
    }
  ]
)

db.mediumRelation.aggregate(
  [
     {
      $match: {
        "A3" : 9
      }
    },
    {
      $count : "tot"
    }
  ]
)

db.mediumRelation.aggregate(
  [
    {
      $match : {
        "BK" : {$exists : true}
      }
    },
    {
      $project : 
      {
        "_id" : 0,
        "BK" : 1
      }
    },
    {
      $sample: {
        size: 10
      }
    }
  ]
)

// var bho = db.mediumRelation.aggregate(
//   [
//     {
//       $match : {
//         "AK" : {$exists : true}
//       }
//     },
//     {
//       $project : 
//       {
//         "_id" : 1,
//         "AK" : 1
//       }
//     },
//     {
//       $sample: {
//         size: 1
//       }
//     }
//   ]
// )

// cacca = bho.toArray()
// cacca[0]._id


// var child = db.mediumRelation.aggregate(
//   [
//     {
//       $match : {
//         "BK" : {$exists : true}
//       }
//     },
//     {
//       $project : 
//       {
//         "_id" : 1,
//         "BK" : 1
//       }
//     },
//     {
//       $sample: {
//         size: 10
//       }
//     }
//   ]
// )


// childList = child.toArray()
// // childList
// // childList.forEach(function(i){print(i._id)})
// // childList[4]._id

// db.mediumRelation.aggregate(
//   [
//     {
//       $match : {
//         "AK" : {$exists : true}
//       }
//     },
//     {
//       $project : 
//       {
//         "_id" : 1,
//         "AK" : 1
//       }
//     },
//     // {
//       // $sample: {
//         // size: 1
//       // }
//     // },
//     {
//       $addFields: {
//         "BK": childList 
//       }
//     }
//   ]
// )


// Query per ottenere referencing di B in A

// db.relation.aggregate(
//   [
//     {
//       $project : {
//         "_id" : 0,
//         "FAK" : 1,
//         "BK" : 1
//       }
//     },
//     {
//       $match: {
//         "BK" : {$exists : true}
//       }
//     }
//     ,
//     // {
//       // /**
//       //  * size: The number of documents to sample.
//       //  */
//       // $sample: {
//         // size: 3
//       // }
//     // },
//     {
//       $lookup: {
//         from: 'relation',
//         localField: 'FAK',
//         foreignField: 'AK',
//         as: 'arr'
//       }
//     },
//     {
//       $unwind : "$arr"
//     },
//     {
//       /**
//        * specifications: The fields to
//        *   include or exclude.
//        */
//       $project: {
//         "FAK" : 0,
//         "arr._id" : 0
//       }
//     },{
//       /**
//        * specifications: The fields to
//        *   include or exclude.
//        */
//       $project: {
//         "AK" : "$arr.AK",
//         "BK" : "$BK",
//         "A1" : "$arr.A1",
//         "A2" : "$arr.A2",
//         "A3" : "$arr.A3",
//         "A4" : "$arr.A4",
//         "A5" : "$arr.A5",
//         "A6" : "$arr.A6",
//         "A7" : "$arr.A7",
//       }
//     },{
//       $out : "refBinA"
//     }
//   ]
// )
 


// Query per l'embedding
db.relation.aggregate(
  [
    {
      $match: {
        "BK" : {$exists : true},
        "FAK" : 1000            // da rimuovere
        // ma ho
        // PlanExecutor error during aggregation :: caused by :: Exceeded memory limit 
        // for $group, but didn't allow external sort. Pass allowDiskUse:true to opt in.
      }
    },{
      $group: {
        _id: {"AK" : "$FAK"}, "BK": {$addToSet : "$$ROOT"}
      }
    },
    {
      $lookup: {
        from: 'relation',
        localField: '_id.AK',
        foreignField: 'AK',
        as: 'AK'
      }
    },{
      $project : {"_id" : 0,"BK.FAK" : 0}
    },{
    $unwind: {
      path: "$AK",
    }},{
      $project : {"A" : "$AK", "B" : "$BK"} // li voglio in quest ordine
    }
   ]
)

//query per il referencing di B in A
db.relation.aggregate(
  [
    {
      $match : { "BK" : {$exists : true }, 
      "BK" : 1000 //temp
      }
    },{
      $project: {
        "_id" : 0,
        "AK" : "$FAK",
        "BK" : "$BK"
        }
    },{
      $lookup: {
        from: 'relation',
        localField: 'AK',
        foreignField: 'AK',
        as: 'A'
      }
    },{
      $unwind: {
        path: "$A",
      }
    },{
      $project: { // ordine di visualizzazione preferito
        "_id" :"$A._id",
        "AK" : "$A.AK",
        "FBK" : "$BK",
        "A1" : "$A.A1",
        "A2" : "$A.A2",
        "A3" : "$A.A3",
        "A4" : "$A.A4",
        "A5" : "$A.A5",
        "A6" : "$A.A6",
        "A7" : "$A.A7"
      }
    }
  ]
)

// Query per l'embedding B in A
db.relation.aggregate(
  [
    {
      $match: {
        "BK" : {$exists : true},
        "BK" : 1000            // da rimuovere
        // ma ho
        // PlanExecutor error during aggregation :: caused by :: Exceeded memory limit 
        // for $group, but didn't allow external sort. Pass allowDiskUse:true to opt in.
      }
    },{
      $lookup: {
        from: 'relation',
        localField: 'FAK',
        foreignField: 'AK',
        as: 'A'
      }
    },{
      $project: {
        "FAK" : 0
      }
    }
  ]
)

