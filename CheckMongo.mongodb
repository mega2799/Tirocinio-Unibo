// MongoDB Playground
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

const database = 'tirocinio';
const collection = 'NEW_COLLECTION_NAME';

// The current database to use.
use(database);

// Create a new collection

db.post.aggregate(
  [
    {
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      $unwind: {
        path: "$Post"
      }
    },
    {
      $match: {
        "Post.A1" : 1
      }
    },
    {
      $count: "total"
    }
  ]
)

db.post.aggregate(
  [
    {
      $unwind : {
        path : "$Post"
      }
    },
    {
      /**
       * query: The query in MQL.
       */
      $match: {
        "Post.AK" : 1
      }
    }
  ]
)

db.mediumRelation.aggregate(
  [
     {
      $match: {
        "A1" : 412
      }
    },
    {
      $count : "tot"
    }
  ]
)

// db.mediumRelation.aggregate(
//   [
//      {
//       $match: {
//         "A1" :  
//       }
//     },
//     {
//       $count : "tot"
//     } 
//   ]
// )


db.mediumRelation.aggregate(
  [
    {
      $match: {
        // "AK" : {$exists : true}
        "AK" : 23
      }
    }
  ]
)

db.mediumRelation.aggregate(
  [
     {
      $match: {
        "A3" : 9
      }
    },
    {
      $count : "tot"
    }
  ]
)

db.mediumRelation.aggregate(
  [
    {
      $match : {
        "BK" : {$exists : true}
      }
    },
    {
      $project : 
      {
        "_id" : 0,
        "BK" : 1
      }
    },
    {
      $sample: {
        size: 10
      }
    }
  ]
)

var bho = db.mediumRelation.aggregate(
  [
    {
      $match : {
        "AK" : {$exists : true}
      }
    },
    {
      $project : 
      {
        "_id" : 1,
        "AK" : 1
      }
    },
    {
      $sample: {
        size: 1
      }
    }
  ]
)

cacca = bho.toArray()
cacca[0]._id


var child = db.mediumRelation.aggregate(
  [
    {
      $match : {
        "BK" : {$exists : true}
      }
    },
    {
      $project : 
      {
        "_id" : 1,
        "BK" : 1
      }
    },
    {
      $sample: {
        size: 10
      }
    }
  ]
)


childList = child.toArray()
// childList
// childList.forEach(function(i){print(i._id)})
// childList[4]._id

db.mediumRelation.aggregate(
  [
    {
      $match : {
        "AK" : {$exists : true}
      }
    },
    {
      $project : 
      {
        "_id" : 1,
        "AK" : 1
      }
    },
    // {
      // $sample: {
        // size: 1
      // }
    // },
    {
      $addFields: {
        "BK": childList 
      }
    }
  ]
)


// var id = db.mediumRelation.findOne()

// id._id

// 
// 
// db.mediumRelation.find(
  // {
    // "A1" : {$exists : true}
  // }
// ).count()
// 
// db.mediumRelation.distinct(
  // "A2"
// ).length 
// 

// db.cp.aggregate(
  // [
    // {
      // $unwind : {path : "$Comment with post"}
    // }
  // ]
// )
// 

// The prototype form to create a regular collection:
/* db.createCollection( <name>,
  {
    capped: <boolean>,
    autoIndexId: <boolean>,
    size: <number>,
    max: <number>,
    storageEngine: <document>,
    validator: <document>,
    validationLevel: <string>,
    validationAction: <string>,
    indexOptionDefaults: <document>,
    viewOn: <string>,
    pipeline: <pipeline>,
    collation: <document>,
    writeConcern: <document>
  }
) */

// The prototype form to create a time-series collection:
/* db.createCollection( <name>,
  {
    timeseries: {
      timeField: <string>,
      metaField: <string>,
      granularity: <string>
    },
    expireAfterSeconds: <number>
  }
) */
